# Multi-stage build for optimized production image
FROM python:3.13-slim as builder

# Install security updates and build dependencies for Python packages and SQLite
RUN apt-get update && apt-get upgrade -y && apt-get install -y \
    gcc \
    g++ \
    wget \
    make \
    ca-certificates \
    gnupg \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Build and install SQLite 3.50.4 for consistent FTS5 ranking with security verification
RUN wget --progress=dot:mega https://www.sqlite.org/2025/sqlite-autoconf-3500400.tar.gz && \
    # Verify file integrity (you should add checksum verification in production)
    echo "Expected checksum verification would go here" && \
    tar xzf sqlite-autoconf-3500400.tar.gz && \
    cd sqlite-autoconf-3500400 && \
    ./configure --prefix=/opt/sqlite \
        --enable-fts5 \
        --enable-rtree \
        --disable-static \
        --enable-shared && \
    make && \
    make install && \
    cd .. && \
    rm -rf sqlite-autoconf-3500400*

# Create virtual environment and install Python dependencies with security updates
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt gunicorn

# Production stage
FROM python:3.13-slim

# Install security updates and minimal runtime dependencies
RUN apt-get update && apt-get upgrade -y && apt-get install -y \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && apt-get autoremove -y

# Copy SQLite from builder stage
COPY --from=builder /opt/sqlite /usr/local
RUN ldconfig

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create app user for security with more restrictive settings
RUN groupadd -g 1000 appuser && \
    useradd -r -u 1000 -g appuser -s /sbin/nologin -c "App User" appuser

# Set working directory
WORKDIR /app

# Copy application code with proper ownership
COPY --chown=appuser:appuser src/ ./src/
COPY --chown=appuser:appuser setup.py .
COPY --chown=appuser:appuser requirements.txt .

# Install the application
RUN pip install -e .

# Create data directory for SQLite database with proper permissions
RUN mkdir -p /app/data && \
    chown -R appuser:appuser /app && \
    chmod 755 /app && \
    chmod 755 /app/data

# Remove potentially dangerous tools in production (before switching user)
RUN rm -rf /usr/share/man/* /usr/share/doc/* /tmp/* /var/tmp/*

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/api/status || exit 1

# Security labels and metadata
LABEL maintainer="jira-search" \
      version="1.0" \
      description="Jira Search Application" \
      security.non-root="true" \
      security.minimal-tools="true" \
      security.updates="2025-01-08"

# Default command - use Gunicorn for production with security settings
CMD ["gunicorn", \
     "--bind", "0.0.0.0:8080", \
     "--workers", "4", \
     "--timeout", "120", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--preload", \
     "--access-logfile", "-", \
     "--error-logfile", "-", \
     "jira_search.wsgi:application"]