# Multi-stage build with UBI for production security
FROM registry.access.redhat.com/ubi9/python-311:latest as builder

# Switch to root for build operations
USER 0

# Install build dependencies
RUN dnf update -y && \
    dnf install -y \
        gcc \
        gcc-c++ \
        make \
        wget \
        tar \
        gzip \
    && dnf clean all

# Build and install SQLite 3.50.4 for consistent FTS5 ranking
RUN wget --progress=dot:mega https://www.sqlite.org/2025/sqlite-autoconf-3500400.tar.gz && \
    # In production, add checksum verification here
    echo "Add checksum verification in production" && \
    tar xzf sqlite-autoconf-3500400.tar.gz && \
    cd sqlite-autoconf-3500400 && \
    ./configure --prefix=/opt/sqlite \
        --enable-fts5 \
        --enable-rtree \
        --disable-static \
        --enable-shared && \
    make && \
    make install && \
    cd .. && \
    rm -rf sqlite-autoconf-3500400*

# Create virtual environment and install Python dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt gunicorn

# Copy and install application
COPY src/ ./src/
COPY setup.py .
RUN pip install -e .

# Production stage - UBI Micro for maximum security
FROM registry.access.redhat.com/ubi9-micro:latest

# Copy Python runtime and essential libraries from builder
COPY --from=builder /usr/bin/python3.11 /usr/bin/python3.11
COPY --from=builder /usr/bin/python3 /usr/bin/python3
COPY --from=builder /usr/lib64/python3.11 /usr/lib64/python3.11

# Copy essential shared libraries for Python
COPY --from=builder /lib64/ld-linux-aarch64.so.1 /lib64/
COPY --from=builder /lib64/libc.so.6 /lib64/
COPY --from=builder /lib64/libpthread.so.0 /lib64/
COPY --from=builder /lib64/libdl.so.2 /lib64/
COPY --from=builder /lib64/libutil.so.1 /lib64/
COPY --from=builder /lib64/libm.so.6 /lib64/
COPY --from=builder /lib64/libexpat.so.1 /lib64/
COPY --from=builder /lib64/libz.so.1 /lib64/

# Copy SQLite from builder stage
COPY --from=builder /opt/sqlite /usr/local

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set up library path
ENV LD_LIBRARY_PATH="/usr/local/lib:/lib64:/usr/lib64"

# Create minimal directory structure
RUN mkdir -p /app/data

# Copy application from builder
COPY --from=builder --chown=1000:1000 /opt/app-root/src/src /app/src/
COPY --from=builder --chown=1000:1000 /opt/app-root/src/setup.py /app/setup.py

# Set working directory
WORKDIR /app

# Use UBI Micro's default user (1001)
USER 1001

# Expose port
EXPOSE 8080

# Security and metadata labels
LABEL name="jira-search-ubi" \
      version="1.0" \
      description="Jira Search Application on UBI Micro" \
      security.base-image="ubi9-micro" \
      security.non-root="true" \
      security.minimal="true" \
      security.no-shell="true" \
      security.updates="2025-01-08"

# Default command with security settings (direct execution, no shell)
ENTRYPOINT ["/opt/venv/bin/gunicorn"]
CMD ["--bind", "0.0.0.0:8080", \
     "--workers", "4", \
     "--timeout", "120", \
     "--max-requests", "1000", \
     "--max-requests-jitter", "100", \
     "--preload", \
     "--access-logfile", "-", \
     "--error-logfile", "-", \
     "jira_search.wsgi:application"]